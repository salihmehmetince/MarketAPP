//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarketAppProject.EntityLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBMarketAppEntities : DbContext
    {
        public DBMarketAppEntities()
            : base("name=DBMarketAppEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TblAdmin> TblAdmin { get; set; }
        public virtual DbSet<TblAppCurrency> TblAppCurrency { get; set; }
        public virtual DbSet<TblCashSaleDetail> TblCashSaleDetail { get; set; }
        public virtual DbSet<TblCompany> TblCompany { get; set; }
        public virtual DbSet<TblCompanyHasFactory> TblCompanyHasFactory { get; set; }
        public virtual DbSet<TblCompanyHasMarket> TblCompanyHasMarket { get; set; }
        public virtual DbSet<TblCompanyHasWarehouse> TblCompanyHasWarehouse { get; set; }
        public virtual DbSet<TblCompanyOwerHasCompany> TblCompanyOwerHasCompany { get; set; }
        public virtual DbSet<TblCompanyOwner> TblCompanyOwner { get; set; }
        public virtual DbSet<TblCompanyType> TblCompanyType { get; set; }
        public virtual DbSet<TblCountry> TblCountry { get; set; }
        public virtual DbSet<TblCreditCardSaleDetail> TblCreditCardSaleDetail { get; set; }
        public virtual DbSet<TblCurrency> TblCurrency { get; set; }
        public virtual DbSet<TblCustomer> TblCustomer { get; set; }
        public virtual DbSet<TblCustomerBuysProductWithCash> TblCustomerBuysProductWithCash { get; set; }
        public virtual DbSet<TblCustomerBuysProductWithCreditCard> TblCustomerBuysProductWithCreditCard { get; set; }
        public virtual DbSet<TblDepartmentType> TblDepartmentType { get; set; }
        public virtual DbSet<TblEmployee> TblEmployee { get; set; }
        public virtual DbSet<TblEquipment> TblEquipment { get; set; }
        public virtual DbSet<TblFactory> TblFactory { get; set; }
        public virtual DbSet<TblFactoryHasEmployee> TblFactoryHasEmployee { get; set; }
        public virtual DbSet<TblFactoryHasEquipment> TblFactoryHasEquipment { get; set; }
        public virtual DbSet<TblFactoryHasVehicle> TblFactoryHasVehicle { get; set; }
        public virtual DbSet<TblFactoryInventory> TblFactoryInventory { get; set; }
        public virtual DbSet<TblFactoryProducedProduct> TblFactoryProducedProduct { get; set; }
        public virtual DbSet<TblFactorySendsProductToMarket> TblFactorySendsProductToMarket { get; set; }
        public virtual DbSet<TblFactorySendsProductToWarehouse> TblFactorySendsProductToWarehouse { get; set; }
        public virtual DbSet<TblMarket> TblMarket { get; set; }
        public virtual DbSet<TblMarketHasEmployee> TblMarketHasEmployee { get; set; }
        public virtual DbSet<TblMarketHasEquipment> TblMarketHasEquipment { get; set; }
        public virtual DbSet<TblMarketHasVehicle> TblMarketHasVehicle { get; set; }
        public virtual DbSet<TblMarketInventory> TblMarketInventory { get; set; }
        public virtual DbSet<TblPositionType> TblPositionType { get; set; }
        public virtual DbSet<TblProductBrand> TblProductBrand { get; set; }
        public virtual DbSet<TblProductKind> TblProductKind { get; set; }
        public virtual DbSet<TblProductTemplate> TblProductTemplate { get; set; }
        public virtual DbSet<TblProductType> TblProductType { get; set; }
        public virtual DbSet<TblProductUnit> TblProductUnit { get; set; }
        public virtual DbSet<TblProfession> TblProfession { get; set; }
        public virtual DbSet<TblRankType> TblRankType { get; set; }
        public virtual DbSet<TblVehicle> TblVehicle { get; set; }
        public virtual DbSet<TblVehicleBrand> TblVehicleBrand { get; set; }
        public virtual DbSet<TblVehicleModel> TblVehicleModel { get; set; }
        public virtual DbSet<TblVehicleType> TblVehicleType { get; set; }
        public virtual DbSet<TblWarehouse> TblWarehouse { get; set; }
        public virtual DbSet<TblWarehouseHasEmployee> TblWarehouseHasEmployee { get; set; }
        public virtual DbSet<TblWareHouseHasEquipment> TblWareHouseHasEquipment { get; set; }
        public virtual DbSet<TblWarehouseHasVehicle> TblWarehouseHasVehicle { get; set; }
        public virtual DbSet<TblWarehouseInventory> TblWarehouseInventory { get; set; }
        public virtual DbSet<TblWarehouseSendsToMarket> TblWarehouseSendsToMarket { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TblFactoryProductProduction> TblFactoryProductProduction { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
